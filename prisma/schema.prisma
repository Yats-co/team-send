generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id          String  @id @default(cuid())
  name        String
  description String?
  image       String?

  members  Member[]
  messages Message[]

  useSMS     Boolean @default(true)
  useEmail   Boolean @default(true)
  groupMeId  String?
  useGroupMe Boolean @default(false)

  addedGroupIds String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  isArchived Boolean @default(false)
}

model Contact {
  id    String  @id @default(cuid())
  name  String
  phone String? @unique
  email String? @unique
  notes String?

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]
}

model Member {
  id          String  @id @default(cuid())
  memberNotes String?
  isRecipient Boolean @default(true)

  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  memberSnapshots MemberSnapshot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberSnapshot {
  id          String   @id @default(cuid())
  memberNotes String?
  isRecipient Boolean  @default(true)
  createdAt   DateTime @default(now())

  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([id, messageId])
}

enum ReminderPeriod {
  months
  weeks
  days
  hours
  minutes
}

model Reminder {
  id        String         @id @default(cuid())
  num       Int
  period    ReminderPeriod
  message   Message        @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
}

enum ReccurPeriod {
  years
  months
  weeks
  days
}

enum MessageStatus {
  draft
  sent
  pending
  failed
}

enum MessageType {
  scheduled
  recurring
  default
}

model Message {
  id      String  @id @default(cuid())
  subject String?
  content String

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  sendAt   DateTime @default(now())
  sentBy   User     @relation(name: "SentBy", fields: [sentById], references: [id])
  sentById String

  updatedAt       DateTime @updatedAt
  lastUpdatedBy   User     @relation(name: "LastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String

  createdAt   DateTime @default(now())
  createdBy   User     @relation(name: "CreatedBy", fields: [createdById], references: [id])
  createdById String

  isScheduled     Boolean       @default(false)
  scheduledDate   DateTime?
  isRecurring     Boolean       @default(false)
  recurringNum    Int?
  recurringPeriod ReccurPeriod?
  isReminders     Boolean       @default(false)
  reminders       Reminder[]

  recipients MemberSnapshot[]
  status     MessageStatus
  type       MessageType      @default(default)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  password          String?
  provider          String
  providerAccountId String?
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  username      String?   @unique
  phone         String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  emailConfig   EmailConfig?
  smsConfig     SmsConfig?
  groupMeConfig GroupMeConfig?
  account       Account?

  sessions Session[]
  groups   Group[]
  contacts Contact[]

  messagesSent     Message[] @relation(name: "SentBy")
  messagesReceived Message[] @relation(name: "CreatedBy")
  messagesUpdated  Message[] @relation(name: "LastUpdatedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailConfig {
  id    String @id @default(cuid())
  email String // @unique

  accessToken  String
  refreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
}

model SmsConfig {
  id String @id @default(cuid())

  accountSid  String
  phoneNumber String
  authToken   String
  isDefault   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
}

model GroupMeConfig {
  id String @id @default(cuid())

  accessToken String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
}
