generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id          String  @id @default(cuid())
  name        String
  description String?
  avatar      String?

  members      Member[]
  membersCount Int       @default(0)
  messages     Message[]

  phone Boolean @default(true)
  email Boolean @default(true)

  addedGroupIds   String[]
  addedContactIds String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
}

model Contact {
  id    String  @id @default(cuid())
  name  String
  phone String? @unique
  email String? @unique
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  members  Member[]
}

model Member {
  id          String  @id @default(cuid())
  memberNotes String?
  isRecipient Boolean @default(true)

  contact   Contact @relation(fields: [contactId], references: [id])
  contactId String
  group     Group   @relation(fields: [groupId], references: [id])
  groupId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Message   Message? @relation(fields: [messageId], references: [id])
  messageId String?
}

enum ReminderPeriod {
  months
  weeks
  days
}

model Reminder {
  id        String         @id @default(cuid())
  num       Int
  period    ReminderPeriod
  message   Message        @relation(fields: [messageId], references: [id])
  messageId String
}

enum ReccurPeriod {
  years
  months
  weeks
  days
}

model Message {
  id      String @id @default(cuid())
  content String

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  sentAt   DateTime @default(now())
  sentBy   User     @relation(name: "SentBy", fields: [sentById], references: [id])
  sentById String

  updatedAt       DateTime @updatedAt
  lastUpdatedBy   User     @relation(name: "LastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String

  createdAt   DateTime @default(now())
  createdBy   User     @relation(name: "CreatedBy", fields: [createdById], references: [id])
  createdById String

  isScheduled     Boolean       @default(false)
  scheduledDate   DateTime?
  isRecurring     Boolean       @default(false)
  recurringNum    Int?
  recurringPeriod ReccurPeriod?
  isReminders     Boolean       @default(false)
  reminders       Reminder[]

  recipients Member[]
  status     String   @default("draft")
  Contact    Contact? @relation(fields: [contactId], references: [id])
  contactId  String?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String  @id @default(cuid())
  name     String?
  username String? @unique
  phone    String? @unique
  email    String? @unique
  // emailVerified DateTime?
  avatar   String?

  nodeMailer String?
  twilio     String?

  accounts Account[]
  sessions Session[]
  groups   Group[]

  messagesSent     Message[] @relation(name: "SentBy")
  messagesReceived Message[] @relation(name: "CreatedBy")
  messagesUpdated  Message[] @relation(name: "LastUpdatedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
